setwd("B:/01 IIITB UPGRAD PGD DATA ANALYTICS/CAPSTONE PROJECT/Kusuma_Rajesh_DDA1710254")
# Credit Bureau data
# Demographic data
library(data.table)
library(dplyr)
# Loading the data files.
# 1. Demographics data: This file contains all the demographic information of the customer.
# 2. Credit burea data: This file containg the information of credit transctions of customer.
#                       The source of this data is CIBIL
credit_burea <- read.csv("Credit Bureau data.csv", stringsAsFactors = F)
demographic <- read.csv("Demographic data.csv", stringsAsFactors = F)
# Firstly, let us understand the data file by look at thier structure.
str(credit_burea)
str(demographic)
# Looking at the summary of the data gives us a sence of the type of data that we are delaing with.
lapply(demographic, function(x) summary(x))
lapply(credit_burea, function(x) summary(x))
# Checking duplicate records
demographic[duplicated(demographic),]
credit_burea[duplicated(credit_burea),]
# Demographics data has duplicate values
length(unique(demographic$Application.ID)) # 71292 unique ids are there and 3 are duplicates.
length(unique(credit_burea$Application.ID)) # 71292 unique ids are there and 3 are duplicates.
# Checking duplicate application ids
Duplicate_demo_app_id_rec <- demographic[duplicated(demographic$Application.ID),]
Duplicate_cred_app_id_rec <- credit_burea[duplicated(credit_burea$Application.ID),]
# Removing duplicates
demographic<- demographic[!duplicated(demographic$Application.ID),]
credit_burea <- credit_burea[!duplicated(credit_burea$Application.ID),]
# Merging the two datasets.
# The count is not matching because there are duplicates values in application id column.
credit_merged <- merge(demographic, credit_burea, by.x =  "Application.ID", by.y =  "Application.ID",all.x = T)
# Check if performance indicators from both data sets are same
credit_merged[which(credit_merged$Performance.Tag.x != credit_merged$Performance.Tag.y),]
credit_merged
# MISSING VALUES TREATMENT:
# Lets check how many missing values each row has
lapply(credit_merged, function(x) sum(is.na(x)))
# These are all the customers with NA values in our target variable.
View(credit_merged[is.na(credit_merged$Performance.Tag.y), ])
# Assumption : If performanance variabes are not present, then those records are not appoved catagory
# hence consider only approved records for the analysis
credit_merged_approved <- credit_merged[!is.na(credit_merged$Performance.Tag.y), ]
#----------------------------------------------------------------------------------------------
# 2.Data Preparations
#----------------------------------------------------------------------------------------------
# We need to only have one target variable, so removing one.
which(colnames(credit_merged_approved) == "Performance.Tag.x")
credit_merged_approved <- credit_merged_approved[,-12]
# Checking the missing values for approved records
lapply(credit_merged_approved, function(x) sum(is.na(x)))
# The below function will tell us if there are any data quality issues. Go through each varibale and see
# identify if there is any data quality issue.
lapply(credit_merged_approved, function(x) summary(x))
# Removing one negative record of Age i.e.-3
credit_merged_approved<- dplyr::filter(credit_merged_approved,credit_merged_approved$Age != -3)
# Found 99 records that have -ve income, so convert them into +ve value
credit_merged_approved$Income <- ifelse(credit_merged_approved$Income==-0.50,0.50,credit_merged_approved$Income)
dplyr::filter(credit_merged_approved,credit_merged_approved$Income== 0.50)
#----------------------------------------------------------------------------------------------
# Outiler treatments
#----------------------------------------------------------------------------------------------
library(ggplot2)
# Plotting Age histogram
ggplot(credit_merged_approved,aes(Age))+geom_histogram()
# The below function will tell us if there are any data quality issues. Go through each varibale and see
# identify if there is any data quality issue.
lapply(credit_merged_approved, function(x) summary(x))
#----------------------------------------------------------------------------------------------
# Outiler treatments
#----------------------------------------------------------------------------------------------
library(ggplot2)
# Plotting Age histogram
ggplot(credit_merged_approved,aes(Age))+geom_histogram()
# Plotting Age histogram
ggplot(credit_merged_approved,aes(Age))+geom_histogram(binwidth = 10)
# Plotting Age histogram
ggplot(credit_merged_approved,aes(Age)) + geom_histogram(binwidth = 5)
# Plotting Age histogram
ggplot(credit_merged_approved,aes(Age)) + geom_histogram(binwidth = 2)
# Let's check the outlier in the variables
quantile(credit_merged_approved$Age,seq(0,1,0.01))
# Capping the low values of age with 27.
credit_merged_approved[(which(credit_merged_approved$Age == 0)),]$Age <- 27
# Plotting Income histogram
ggplot(credit_merged_approved,aes(Income)) + geom_histogram()
# Plotting Income histogram
ggplot(credit_merged_approved,aes(Income)) + geom_histogram(binwidth = 2)
# Check Gender values
barplot(prop.table(table(credit_merged_approved$Gender)))
table(credit_merged_approved$Gender)
# Check Gender values
barplot(table(credit_merged_approved$Gender))
install.packages("rmarkdown")
rmarkdown::render("Kusuma_Rajesh_DDA1710254.R")
rmarkdown::render("Kusuma_Rajesh_DDA1710254.R")
